Problem Statement: 42. Trapping Rain Water (LEETCODE) :
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Language Used : JAVA Programming Language.

Time Complexity : O(n);
Test Case: 
          Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
          Output: 6
          Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1].
          In this case, 6 units of rain water (blue section) are being trapped.
          
Solution:

class Solution {
    public int trap(int[] height) {
        int n=height.length;
        //using auxilary arrays: leftMax and rightMax
        
        
        // left max height
        
                int leftMax[]=new int[n];
        leftMax[0] = height[0];

        for(int i=1; i<n ; i++){
            leftMax[i]=Math.max(height[i],leftMax[i-1]);// calculate left maximum for every boundary
        }
        
        // right max height
        
                int rightMax[]=new int[n];
        rightMax[n-1]=height[n-1];
        
        for(int i=n-2; i>=0 ; i-- ){
             rightMax[i]=Math.max(height[i],rightMax[i+1]);// calculate right maximum for every boundary

        }
        
        //for trapped water
            int trapped=0;
        for(int i=0 ; i<n ; i++){
            
            int waterLevel = Math.min(leftMax[i],rightMax[i]);
            
            trapped += waterLevel - height[i];
            
        }
        return trapped;
            
}
}
